from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import List

from py2puml.classes import PythonClass
from py2puml.package import PythonPackage


class ClassDiagram:

    def __init__(self, package: PythonPackage):
        self.package: PythonPackage = package
        self.classes: List[PythonClass] = package.find_all_classes()
        self.relations = []

    def define_relations(self):
        """ Method that defines inheritance relations by searching through all classes for classes having one or more
        base class(es) """
        for _class in self.classes:
            if _class.base_classes:
                for base_class in _class.base_classes.values():
                    source = _class.fully_qualified_name
                    destination = base_class.fully_qualified_name
                    relation = InheritanceRelation(source=source, destination=destination)
                    self.relations.append(relation)

    def generate(self):
        yield self.header
        yield self.package.as_puml
        for _class in self.classes:
            yield _class.as_puml
        for relation in self.relations:
            yield relation.as_puml
        yield self.footer

    @property
    def header(self):
        return f'@startuml {self.package.fully_qualified_name}\n'

    @property
    def footer(self):
        return 'footer Generated by //py2puml//\n@enduml\n'


@dataclass
class Relation(ABC):

    def __init__(self, source: str, destination: str):
        self.source = source
        self.destination = destination

    @property
    @abstractmethod
    def as_puml(self):
        pass


class InheritanceRelation(Relation):

    @property
    def as_puml(self):
        return f'{self.destination} <|-- {self.source}\n'
